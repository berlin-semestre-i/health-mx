// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SideBar renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Sidebar />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "className": "standard",
      "fixed": "left",
      "vertical": true,
    },
    "ref": null,
    "rendered": null,
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "Header": [Function],
      "Item": [Function],
      "Menu": [Function],
      "attrs": undefined,
      "autoControlledProps": Array [
        "activeIndex",
      ],
      "componentStyle": ComponentStyle {
        "componentId": "SideBar__CustomMenu-t6zucg-0",
        "isStatic": true,
        "rules": Array [
          "&&&&{width:6.25%;border:none;-webkit-box-shadow:0 0 10px 1px #e7e9ed;box-shadow:0 0 10px 1px #e7e9ed;}",
        ],
      },
      "create": [Function],
      "displayName": "SideBar__CustomMenu",
      "handledProps": Array [
        "activeIndex",
        "as",
        "attached",
        "borderless",
        "children",
        "className",
        "color",
        "compact",
        "defaultActiveIndex",
        "fixed",
        "floated",
        "fluid",
        "icon",
        "inverted",
        "items",
        "onItemClick",
        "pagination",
        "pointing",
        "secondary",
        "size",
        "stackable",
        "tabular",
        "text",
        "vertical",
        "widths",
      ],
      "render": [Function],
      "styledComponentId": "SideBar__CustomMenu-t6zucg-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "className": "standard",
        "fixed": "left",
        "vertical": true,
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "Header": [Function],
        "Item": [Function],
        "Menu": [Function],
        "attrs": undefined,
        "autoControlledProps": Array [
          "activeIndex",
        ],
        "componentStyle": ComponentStyle {
          "componentId": "SideBar__CustomMenu-t6zucg-0",
          "isStatic": true,
          "rules": Array [
            "&&&&{width:6.25%;border:none;-webkit-box-shadow:0 0 10px 1px #e7e9ed;box-shadow:0 0 10px 1px #e7e9ed;}",
          ],
        },
        "create": [Function],
        "displayName": "SideBar__CustomMenu",
        "handledProps": Array [
          "activeIndex",
          "as",
          "attached",
          "borderless",
          "children",
          "className",
          "color",
          "compact",
          "defaultActiveIndex",
          "fixed",
          "floated",
          "fluid",
          "icon",
          "inverted",
          "items",
          "onItemClick",
          "pagination",
          "pointing",
          "secondary",
          "size",
          "stackable",
          "tabular",
          "text",
          "vertical",
          "widths",
        ],
        "render": [Function],
        "styledComponentId": "SideBar__CustomMenu-t6zucg-0",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
